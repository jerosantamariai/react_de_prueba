{"ast":null,"code":"const getState = ({\n  getStore,\n  getActions,\n  setStore\n}) => {\n  return {\n    store: {\n      variablePrueba: null,\n      etnias: null\n    },\n    actions: {\n      // ! BASE DE PETICIONES\n      // ? GET --> Método se debe llamar tal como se puso en appContext\n      // ? getSome: url => {\n      // ?     fetch(url, {\n      // ?         method: 'GET',\n      // ?         headers: {\n      // ?             'Content-Type': 'application/json'\n      // ?         }\n      // ?     })\n      // ?         .then(resp => resp.json())\n      // ?         .then(data => {\n      // ?             setStore({\n      // ?                 variable: data\n      // ?             })\n      // ?         })\n      // ?         .catch(error => {\n      // ?             console.log(error)\n      // ?         })\n      // ? },\n      // ! ---------------\n      // * POST\n      // postSome: (e, history) => {\n      //     e.preventDefault();\n      //     const store = getStore();\n\n      //     fetch(store.path + '/register', {\n      //         method: 'POST',\n      //         body: JSON.stringify({\n      //             email: store.email,\n      //             password: store.password\n      //         }),\n      //         headers: {\n      //             'Content-Type': 'application/json'\n      //         }\n      //     })\n      //         .then(resp => resp.json())\n      //         .then(data => {\n      //             console.log(data)\n      //             if (data.msg) {\n      //                 const action = getActions()\n      //                 action.getUsers(store.path + \"/users/\");\n      //                 setStore({\n      //                     errors: data\n      //                 })\n      //             } else {\n      //                 setStore({\n      //                     blog: data,\n      //                     currentUser: data,\n      //                     isAuth: true,\n      //                     email: '',\n      //                     password: '',\n      //                     errors: null\n      //                 })\n      //                 sessionStorage.setItem('currentUser', JSON.stringify(data))\n      //                 sessionStorage.setItem('isAuth', true)\n      //                 history.push(\"/dashboard\");\n      //             }\n      //         })\n      // },\n\n      // ! FUNCIONALIDADES GLOBALES\n      handleChange: e => {\n        setStore({\n          [e.target.name]: e.target.value\n        });\n      },\n      getPrueba: url => {\n        fetch(url, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }).then(resp => resp.json()).then(data => {\n          setStore({\n            variablePrueba: data\n          });\n        }).catch(error => {\n          console.log(error);\n        });\n      },\n      getEtnias: url => {\n        fetch(url, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }).then(resp => resp.json()).then(data => {\n          setStore({\n            etnias: data\n          });\n        }).catch(error => {\n          console.log(error);\n        });\n      }\n    }\n  };\n};\nexport default getState;","map":{"version":3,"names":["getState","getStore","getActions","setStore","store","variablePrueba","etnias","actions","handleChange","e","target","name","value","getPrueba","url","fetch","method","headers","then","resp","json","data","catch","error","console","log","getEtnias"],"sources":["/Users/jero/Documents/Codes/reactPrueba/client/src/store/flux.jsx"],"sourcesContent":["const getState = ({ getStore, getActions, setStore }) => {\n    return {\n        store: {\n            variablePrueba: null,\n            etnias: null,\n        },\n        actions: {\n            // ! BASE DE PETICIONES\n            // ? GET --> Método se debe llamar tal como se puso en appContext\n            // ? getSome: url => {\n            // ?     fetch(url, {\n            // ?         method: 'GET',\n            // ?         headers: {\n            // ?             'Content-Type': 'application/json'\n            // ?         }\n            // ?     })\n            // ?         .then(resp => resp.json())\n            // ?         .then(data => {\n            // ?             setStore({\n            // ?                 variable: data\n            // ?             })\n            // ?         })\n            // ?         .catch(error => {\n            // ?             console.log(error)\n            // ?         })\n            // ? },\n            // ! ---------------\n            // * POST\n            // postSome: (e, history) => {\n            //     e.preventDefault();\n            //     const store = getStore();\n\n            //     fetch(store.path + '/register', {\n            //         method: 'POST',\n            //         body: JSON.stringify({\n            //             email: store.email,\n            //             password: store.password\n            //         }),\n            //         headers: {\n            //             'Content-Type': 'application/json'\n            //         }\n            //     })\n            //         .then(resp => resp.json())\n            //         .then(data => {\n            //             console.log(data)\n            //             if (data.msg) {\n            //                 const action = getActions()\n            //                 action.getUsers(store.path + \"/users/\");\n            //                 setStore({\n            //                     errors: data\n            //                 })\n            //             } else {\n            //                 setStore({\n            //                     blog: data,\n            //                     currentUser: data,\n            //                     isAuth: true,\n            //                     email: '',\n            //                     password: '',\n            //                     errors: null\n            //                 })\n            //                 sessionStorage.setItem('currentUser', JSON.stringify(data))\n            //                 sessionStorage.setItem('isAuth', true)\n            //                 history.push(\"/dashboard\");\n            //             }\n            //         })\n            // },\n\n            // ! FUNCIONALIDADES GLOBALES\n            handleChange: e => {\n                setStore({\n                    [e.target.name]: e.target.value\n                })\n            },\n\n            getPrueba: url => {\n                fetch(url, {\n                    method: 'GET',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    }\n                })\n                    .then(resp => resp.json())\n                    .then(data => {\n                        setStore({\n                            variablePrueba: data\n                        })\n                    })\n                    .catch(error => {\n                        console.log(error)\n                    })\n            },\n            \n            getEtnias: url => {\n                fetch(url, {\n                    method: 'GET',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    }\n                })\n                    .then(resp => resp.json())\n                    .then(data => {\n                        setStore({\n                            etnias: data\n                        })\n                    })\n                    .catch(error => {\n                        console.log(error)\n                    })\n            },\n            \n        },\n    }\n}\n\nexport default getState;"],"mappings":"AAAA,MAAMA,QAAQ,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,UAAU;EAAEC;AAAS,CAAC,KAAK;EACrD,OAAO;IACHC,KAAK,EAAE;MACHC,cAAc,EAAE,IAAI;MACpBC,MAAM,EAAE;IACZ,CAAC;IACDC,OAAO,EAAE;MACL;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;MAEA;MACAC,YAAY,EAAEC,CAAC,IAAI;QACfN,QAAQ,CAAC;UACL,CAACM,CAAC,CAACC,MAAM,CAACC,IAAI,GAAGF,CAAC,CAACC,MAAM,CAACE;QAC9B,CAAC,CAAC;MACN,CAAC;MAEDC,SAAS,EAAEC,GAAG,IAAI;QACdC,KAAK,CAACD,GAAG,EAAE;UACPE,MAAM,EAAE,KAAK;UACbC,OAAO,EAAE;YACL,cAAc,EAAE;UACpB;QACJ,CAAC,CAAC,CACGC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAACG,IAAI,IAAI;UACVlB,QAAQ,CAAC;YACLE,cAAc,EAAEgB;UACpB,CAAC,CAAC;QACN,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;UACZC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;QACtB,CAAC,CAAC;MACV,CAAC;MAEDG,SAAS,EAAEZ,GAAG,IAAI;QACdC,KAAK,CAACD,GAAG,EAAE;UACPE,MAAM,EAAE,KAAK;UACbC,OAAO,EAAE;YACL,cAAc,EAAE;UACpB;QACJ,CAAC,CAAC,CACGC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAACG,IAAI,IAAI;UACVlB,QAAQ,CAAC;YACLG,MAAM,EAAEe;UACZ,CAAC,CAAC;QACN,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;UACZC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;QACtB,CAAC,CAAC;MACV;IAEJ;EACJ,CAAC;AACL,CAAC;AAED,eAAevB,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}